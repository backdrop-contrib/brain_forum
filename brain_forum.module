<?php

/**
 * @file
 * Provides a simple discussion forum based on entities.
 *
 * @todo When unpublishing first forum_post in thread, unpublish all forum_posts in thread.
 * @todo Add admin interface to /content section.
 * @todo Redirect user to last page of thread after submit.
 * @todo Move admin functions to separate file.
 */

/**
 * Implements hook_entity_info().
 */
function brain_forum_entity_info() {
  $info['forum_post'] = array(
    'views controller class' => 'EntityDefaultViewsController',
    // Define module for this entity for Views integration to work.
    'module' => 'brain_forum',
    // A human readable label to identify our entity.
    'label' => t('Forum forum_post'),
      'entity class' => 'BrainForumPost',
    // The controller for our Entity - Using controller provided by Entity API.
    'controller class' => 'EntityDatabaseStorageController',
    // The table defined in hook_schema().
    'base table' => 'brain_forum_forum_post',
    'fieldable' => TRUE,
    // The unique key of our base table.
    'entity keys' => array(
      'id' => 'pid',
    ),
    // FALSE disables caching -  caching functionality is handled by Backdrop core
    'static cache' => TRUE,
    // Attach bundles - i.e. alternative configurations of fields associated with a main entity.
    'bundles' => array(
      'forum_post' => array(
        'label' => 'Post',
        // Information below is used by the Field UI - they "attach" themselves here and lets us
        // do the standard field management that all the core entities enjoy.
        'admin' => array(
          'path' => 'admin/structure/brain_forum/manage/forum_post',
          'access arguments' => array('access forum settings'),
        ),
      ),
    ),
    // The admin ui controller for our Entity - Using controller provided by Entity API.
    'admin ui' => array(
      // @todo Find out why 'path' seems to be required for forum_post add form
      // submission to work.
      'path' => 'admin/content/forum_posts',
      //'file' => 'brain_forum.admin.inc',
      // 'controller class' => 'DefaultEntityController',
      //'menu wildcard' => '%brain_forum',
    ),
  );

  $info['thread'] = array(
    'views controller class' => 'EntityDefaultViewsController',
    // Define module for this entity for Views integration to work.
    'module' => 'brain_forum',
    // A human readable label to identify our entity.
    'label' => t('Forum thread'),
      'entity class' => 'BrainForumThread',
    // The controller for our Entity - Using controller provided by Entity API.
    'controller class' => 'EntityDatabaseStorageController',
    // The table defined in hook_schema()
    'base table' => 'brain_forum_thread',
    'fieldable' => TRUE,
    'bundles' => array(
      'thread' => array(
        'label' => 'Thread',
        // Information below is used by the Field UI - they "attach" themselves here and lets us
        // do the standard field management that all the core entities enjoy.
        'admin' => array(
          'path' => 'admin/structure/brain_forum/manage/thread',
          'access arguments' => array('access forum settings'),
        ),
      ),
    ),
    // The unique key of our base table.
    'entity keys' => array(
      'id' => 'tid',
    ),
    // FALSE disables caching -  caching functionality is handled by Backdrop core
    'static cache' => TRUE,
    // The admin ui controller for our Entity - Using controller provided by Entity API.
    'admin ui' => array(
      'path' => 'admin/content/threads',
      // 'controller class' => 'DefaultEntityController',
    ),
  );

  return $info;
}


/**
 * Implements hook_entity_property_info_alter().
 */
function brain_forum_entity_property_info_alter(&$info) {
  $forum_post = &$info['forum_post']['properties'];
  $thread = &$info['thread']['properties'];

  // Alter forum forum_post field mappings.
  $forum_post['created']['type'] = 'date';
  $forum_post['created']['label'] = 'Created date';
  $forum_post['created']['description'] = t('The date the forum_post was created.');
  $forum_post['changed']['type'] = 'date';
  $forum_post['changed']['label'] = 'Updated date';
  $forum_post['changed']['description'] = t('The date the forum_post was last updated.');

  // Alter forum thread field mappings.
  $thread['created']['type'] = 'date';
  $thread['created']['label'] = 'Created date';
  $thread['created']['description'] = t('The date the thread was created.');
  $thread['last_time']['type'] = 'date';
  $thread['last_time']['label'] = 'Last forum_post date';
  $thread['last_time']['description'] = t('Date of when the last forum_post was created.');
  $thread['last_name']['label'] = 'Last forum_post author';
  $thread['last_name']['description'] = t('The name of the author of the last forum_post.');
  $thread['last_uid']['label'] = 'Last forum_post uid';
  $thread['last_uid']['description'] = t('The uid of the author of the last forum_post.');

}

/**
 * Implements hook_menu().
 */
function brain_forum_menu() {
  $items['admin/structure/brain_forum'] = array(
    'title' => 'Brain forum',
    'description' => 'Configure Brain Forum',
    'page callback' => 'brain_forum_admin_page',
    'access arguments' => array('access forum settings'),
  );

  // This provides a place for Field API to hang its own
  // interface and has to be the same as what was defined
  // in brain_forum_entity_info() above.
  $items['admin/structure/brain_forum/manage/forum_post'] = array(
    'title' => 'Post',
    'description' => 'Manage Post Entities Structure',
    'page callback' => 'brain_forum_forum_post_admin_page',
    'access arguments' => array('access forum settings'),
  );

  $items['admin/structure/brain_forum/manage/thread'] = array(
    'title' => 'Thread',
    'description' => 'Manage Thread Entities Structure',
    'page callback' => 'brain_forum_thread_admin_page',
    'access arguments' => array('access forum settings'),
  );

  // This defines a place for us to add new threads.
  $items['forum/thread/add'] = array(
    'title' => 'Start a new forum thread',
    'page callback' => 'brain_forum_forum_post_add_page',
    'access arguments' => array('create forum threads'),
  );

  // This defines a place for us to edit forum_posts.
  // The wildcard needs a matching function to load the entity.
  // The function should be named {WILDCARD}_load().
  $items['forum/forum_post/%forum_post/edit'] = array(
    'title' => 'Edit forum_post',
    'page callback' => 'brain_forum_forum_post_edit_page',
    'page arguments' => array(2),
    'access arguments' => array('edit forum forum_posts'),
  );

  // This defines a place for us to delete forum_post entities
  $items['forum/forum_post/%forum_post/delete'] = array(
    'title' => 'Delete forum_post',
    'page callback' => 'brain_forum_forum_post_delete_page',
    'page arguments' => array(2),
    'access arguments' => array('delete forum forum_posts'),
  );

  return $items;
}


/**
 * Implements hook_permission().
 *
 * If using permissions while building views, remember to add any modifications
 * made here also to brain_forum_views_query_substitutions() in
 * views/brain_forum.views.inc
 */
function brain_forum_permission() {
    return array(
    'access forum settings' =>  array(
      'title' => t('Access forum settings'),
      'description' => t('Access forum admin page(s).'),
      'restrict access' => TRUE,
    ),
    'administer forum threads' =>  array(
      'title' => t('Administer forum threads'),
      'description' => t('View, edit and delete all forum threads and their replies.'),
      'restrict access' => TRUE,
    ),
    'administer forum forum_posts' =>  array(
      'title' => t('Administer forum forum_posts'),
      'description' => t('View, edit and delete all forum forum_posts. Exception: cannot delete first forum_post in a thread, need permission "Administer forum threads" to do that.'),
      'restrict access' => TRUE,
    ),
    'view forum thread list' => array(
      'title' => t('View forum thread list'),
      'description' => t('View summary list of all forum threads.'),
    ),
    'view forum threads' => array(
      'title' => t('View forum threads'),
      'description' => t("View an entire forum thread and all it's forum_posts"),
    ),
    'create forum threads' => array(
      'title' => t('Create forum threads'),
      'description' => t('Start a new forum thread.'),
    ),
    'delete forum threads' => array(
      'title' => t('Delete forum threads'),
      'description' => t('Delete entire forum threads and all their replies.'),
    ),
    'move forum threads' => array(
      'title' => t('Move forum threads'),
      'description' => t('Move an entire forum thread to another forum.'),
    ),
    'create forum forum_posts' => array(
      'title' => t('Create forum forum_posts'),
      'description' => t('Add a reply to an existing forum thread.')
    ),
    'edit forum forum_posts' => array(
      'title' => t('Edit forum forum_posts'),
    ),
    'delete forum forum_posts' => array(
      'title' => t('Delete forum forum_posts'),
    ),
  );
}


/**
 * Implements hook_theme().
 *
 * @todo Create custom template for the forum with predefined css.
 */
function brain_forum_theme() {
  $theme = array(
    'views_view__forum_thread' => array(
      'template' => 'views-view--forum-thread',
      'base hook' => 'views_view',
      'path' => backdrop_get_path('module', 'brain_forum') . '/templates',
    ),
    'views_view_fields__forum_thread' => array(
      'template' => 'views-view-fields--forum-thread',
      'base hook' => 'views_view_fields',
      'path' => backdrop_get_path('module', 'brain_forum') . '/templates',
    ),
  );

  return $theme;
}


/**
 * Implements hook_views_pre_render().
 */
function brain_forum_views_pre_render(&$view) {
  if ($view->name == 'forum_thread' && !empty($view->result)) {
    // Get forum_post pid of first forum_post in the thread.
    $first_pid = $view->result[0]->pid;

    if ($view->args) {
      // Get thread tid of the current thread.
      $tid = intval($view->args[0]);

      // Load current thread object.
      $thread = thread_load($tid);

      // Increment number of views in the thread by 1.
      // @todo Save a user's view in a session variable to get more accurate
      //   results.
      $thread->views++;

      // Load first forum_post object to use when calling brain_forum_forum_post_add_page().
      $first_forum_post = forum_post_load($first_pid);

      // Attach reply form to view if viewing last page of the view.
      $last_page = $last_page = $GLOBALS['pager_total'][0]-1;
      if (pager_find_page() == $last_page && user_access('create forum forum_posts')) {
        $attachment_build = brain_forum_forum_post_add_page($first_forum_post);
        $view->attachment_after = backdrop_render($attachment_build);
      }

      // Save the thread object.
      $thread->save();
    }
  }
}


/**
 * Fetches a forum_post object.
 *
 * Make sure that the wildcard you choose in the forum_post entity definition fits
 * the function name here. hook_menu() uses this function whenever the wildcard
 * appears in the URL.
 *
 * @param $pid
 *   Integer specifying the forum_post entity id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset. Defaults
 *   to FALSE.
 *
 * @return
 *   A fully-loaded forum_post object or FALSE if it cannot be loaded.
 *
 * @see forum_post_load_multiple()
 */
function forum_post_load($pid = NULL, $reset = FALSE) {
  $pids = (isset($pid) ? array($pid) : array());
  $forum_post = forum_post_load_multiple($pids, $reset);
  return $forum_post ? reset($forum_post) : FALSE;
}


/**
 * Loads multiple forum_post objects.
 *
 * @param $pids
 *   An array of forum_post pids, or FALSE to load all forum_posts.
 * @param $conditions
 *   (deprecated) An associative array of conditions on the base table, where
 *   the keys are the database fields and the values are the values those
 *   fields must have. Instead, it is preferable to use EntityFieldQuery to
 *   retrieve a list of entity IDs loadable by this function.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset. Defaults
 *   to FALSE.
 *
 * @return
 *   An array of forum_post objects indexed by their ids. When no results are found,
 *   an empty array is returned.
 *
 * @see entity_load()
 */
function forum_post_load_multiple($pids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('forum_post', $pids, $conditions, $reset);
}


/**
 * Fetches a thread object.
 *
 * Make sure that the wildcard you choose in the thread entity definition fits
 * the function name here. hook_menu() uses this function whenever the wildcard
 * appears in the URL.
 *
 * @param $pid
 *   Integer specifying the thread entity id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset. Defaults
 *   to FALSE.
 *
 * @return
 *   A fully-loaded thread object or FALSE if it cannot be loaded.
 *
 * @see thread_load_multiple()
 */
function thread_load($pid = NULL, $reset = FALSE) {
  $pids = (isset($pid) ? array($pid) : array());
  $thread = thread_load_multiple($pids, $reset);
  return $thread ? reset($thread) : FALSE;
}


/**
 * Loads multiple thread objects.
 *
 * @param $pids
 *   An array of thread pids, or FALSE to load all threads.
 * @param $conditions
 *   (deprecated) An associative array of conditions on the base table, where
 *   the keys are the database fields and the values are the values those
 *   fields must have. Instead, it is preferable to use EntityFieldQuery to
 *   retrieve a list of entity IDs loadable by this function.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset. Defaults
 *   to FALSE.
 *
 * @return
 *   An array of thread objects indexed by their ids. When no results are found,
 *   an empty array is returned.
 *
 * @see entity_load()
 */
function thread_load_multiple($pids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('thread', $pids, $conditions, $reset);
}


function brain_forum_admin_page() {
  $output = '<p>This is the admin page to manage the Brain Forum settings.</p>';

  return $output;
}


/**
 * Just provide some forum_post info for the entity administration page.
 * This can be expanded to add more information / a list of all created entites, etc.
 */
function brain_forum_forum_post_admin_page() {
  $output = '<p>This is the admin page to manage the Brain Forum Post Entity.</p>';

  $output .= l('Add forum forum_post', 'forum/thread/add');

  return $output;
}


function brain_forum_thread_admin_page() {
  $output = '<p>This is the admin page to manage the Brain Forum Thread Entity.</p>';

  return $output;
}


/**
 * Implements hook_views_api().
 */
function brain_forum_views_api() {
  return array(
    'api' => 3,
    'path' => backdrop_get_path('module', 'brain_forum') . '/views',
  );
}


/**
 * Calls form to add new forum_post or thread.
 *
 * @param $forum_post
 *   (optional) The forum_post object to fetch thread tid from if replying to a
 *   thread. Usually the first forum_post in a thread. Defaults to NULL.
 *
 * @see brain_forum_forum_post_add_form()
 */
function brain_forum_forum_post_add_page($forum_post = NULL) {
  // Save the thread tid if one is provided.
  $tid = isset($forum_post) ? $forum_post->tid : NULL;
  // If thread tid is not provided, this is the first forum_post in a new thread.
  $is_first = isset($tid) ? 0 : 1;
  // Create the forum_post object.
  $forum_post = entity_create('forum_post', array('tid' => $tid, 'is_first' => $is_first));

  return backdrop_get_form('brain_forum_forum_post_add_form', $forum_post);
}


/**
 * Calls form to edit forum_post.
 *
 * @param $forum_post
 *   The forum_post object to edit.
 *
 * @see brain_forum_forum_post_add_form()
 */
function brain_forum_forum_post_edit_page($forum_post) {
  return backdrop_get_form('brain_forum_forum_post_add_form', $forum_post);
}


/**
 * Calls form to delete forum_post.
 *
 * @param $forum_post
 *   The forum_post object to delete.
 *
 * @see brain_forum_forum_post_delete_form()
 */
function brain_forum_forum_post_delete_page($forum_post) {
  return backdrop_get_form('brain_forum_forum_post_delete_form', $forum_post);
}


/**
 * Form constructor for the forum_post add/edit form.
 *
 * @param $forum_post
 *   The forum_post object to edit or for a create form an empty forum_post object.
 *
 * @see brain_forum_forum_post_add_page()
 * @see brain_forum_forum_post_edit_page()
 * @see brain_forum_forum_post_add_form_validate()
 * @see brain_forum_forum_post_add_form_submit()
 * @ingroup forms
 */
function brain_forum_forum_post_add_form($form, &$form_state, $forum_post) {
  global $user;
  backdrop_add_css(backdrop_get_path('module', 'brain_forum') . '/css/brain_forum.css');

  if (!isset($forum_post->uid)) {
    // Add the author name field depending on the current user.
    if ($user->uid) {
      $form['namemarkup'] = array(
        '#type' => 'item',
        '#title' => t('Your name'),
        '#markup' => theme('username', array('account' => $user)),
        '#weight' => -30,
      );
      $form['name'] = array(
        '#type' => 'value',
        '#value' => $user->name,
        '#weight' => -30,
      );
    }
    else {
      $form['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Your name'),
        '#default_value' => isset($forum_post->name) ? $forum_post->name : '',
        '#maxlength' => 60,
        '#size' => 30,
        '#required' => TRUE,
        '#weight' => -30,
      );
    }
  }

  // Show the title field only if creating a new thread.
  $form['title'] = array(
    '#type' => !$forum_post->is_first ? 'hidden' : 'textfield',
    '#title' => t('Title'),
    '#default_value' => isset($forum_post->title) ? $forum_post->title : '',
    '#required' => !$forum_post->is_first ? FALSE : TRUE,
    '#weight' => -20,
  );

  // Add the field related form elements.
  $form_state['forum_post'] = $forum_post;
  field_attach_form('forum_post', $forum_post, $form, $form_state);

  // If editing first forum_post in thread, either load or create a thread entity.
  if ($forum_post->is_first) {
    if ($forum_post->tid) {
      $thread = thread_load($forum_post->tid);
    }
    else {
      $thread = entity_create('thread', array());
    }
    $form_state['thread'] = $thread;
    field_attach_form('thread', $thread, $form, $form_state);
  }

  // Show publishing options if user has sufficient permissions.
  $form['status'] = array(
    '#type' => (user_access('administer forum forum_posts') || ($forum_post->is_first && user_access('administer forum threads'))) ? 'checkbox' : 'hidden',
    '#title' => t('Published'),
    '#description' => t('Check to publish forum_post/thread, uncheck to unpublish.'),
    '#default_value' => isset($forum_post->status) ? $forum_post->status : 1,
    '#weight' => 90,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Publish'),
    '#weight' => 100,
  );

  // Show delete and cancel if editing a forum_post.
  if (!empty($forum_post->pid)) {
    if (user_access('administer forum threads') || (!$forum_post->is_first && (user_access('administer forum forum_posts') || user_access('delete forum forum_posts')))) {
      $form['delete'] = array(
        '#type' => 'submit',
        '#value' => t('Delete'),
        '#suffix' => l(t('Cancel'), '<front>'),
        '#submit' => array('brain_forum_forum_post_add_form_submit_delete'),
        '#weight' => 110,
      );
    }
  }

  return $form;
}


/**
 * Form validation handler for brain_forum_forum_post_add_form().
 *
 * Uses Field API to handle validation of attached fields.
 *
 * @see brain_forum_forum_post_add_form_submit()
 */
function brain_forum_forum_post_add_form_validate($form, &$form_state) {
  $forum_post = $form_state['forum_post'];
  field_attach_form_validate('forum_post', $forum_post, $form, $form_state);
  if ($forum_post->is_first) {
    $thread = $form_state['thread'];
    field_attach_form_validate('thread', $thread, $form, $form_state);
  }
}


/**
 * Form submission handler for brain_forum_forum_post_add_form().
 *
 * @see brain_forum_forum_post_add_form_validate()
 */
function brain_forum_forum_post_add_form_submit($form, &$form_state) {
  // Build entity objects.
  $forum_post = brain_forum_entity_build_entity('forum_post', $form, $form_state);
 
  if ($forum_post->is_first) {
    $thread = brain_forum_entity_build_entity('thread', $form, $form_state);
  }

  // Submit attached field values.
  field_attach_submit('forum_post', $forum_post, $form, $form_state);
  if ($forum_post->is_first) {
    field_attach_submit('thread', $thread, $form, $form_state);
  }

  global $user;

  // Add created and changed times.
  // Use REQUEST_TIME here instead of time() for performance reasons.
  // See http://backdrop.org/node/224333#time for more information.
  if (empty($forum_post->uid)) {
    $forum_post->created = REQUEST_TIME;
    // Add information about the author.
    $forum_post->uid = $user->uid;
    $forum_post->ip = ip_address();
    $forum_post->thread_status = $thread->status;
  }
  $forum_post->changed = REQUEST_TIME;

  // Save the created time, author uid and name if creating a new thread.
  if (!isset($forum_post->tid) && $forum_post->is_first) {
    $thread->created = $forum_post->created;
    $thread->uid = $user->uid;
    $thread->name = $forum_post->name;
  }

  // Save the thread object.
  if ($forum_post->is_first) {
    $thread->save();
  }

  // Save the thread.tid in forum_post.tid.
  if (!isset($forum_post->tid) && $forum_post->is_first) {
    $forum_post->tid = $thread->tid;
  }

  // Save the forum_post object.
  $forum_post->save();

  // Redirect user to the thread this forum_post belongs to.
  // @todo Find some better way to get the path of the view.
  $view_forum_thread = views_get_view('forum_thread');
  $thread_path = $view_forum_thread->display['page']->display_options['path'];
  $thread_path = backdrop_substr($thread_path, 0, -1);
  $form_state['redirect'] = $thread_path . $forum_post->tid;

  // @todo Check wheter a forum_post or thread was saved and adjust message
  //   accordingly.
  backdrop_set_message(t('Post saved succesfully.'));
}

function brain_forum_entity_build_entity($entity_type, $form, &$form_state) {
  $entity = $form_state[$entity_type];
  entity_form_submit_build_entity($entity_type, $entity, $form, $form_state);
  return $entity;
}

/**
 * Implements hook_field_attach_form().
 */
function brain_forum_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  // If user is quoting a forum_post, populate the message field in the reply form
  // and add bbcode quote-tags around the text.
  if (isset($_GET['quote'])) {
    // Get forum_post pid of the forum_post to quote.
    $quoted_pid = $_GET['quote'];

    // Load the forum_post object to quote.
    $quoted_forum_post = forum_post_load($quoted_pid);

    // Allow quoting only if the quoted forum_post is published and belongs to the
    // same thread.
    if ($quoted_forum_post->status && ($quoted_forum_post->tid == $form_state['forum_post']->tid)) {
      // Use field_get_items() to get the message field, as it is created through
      // the Field API.
      $quoted_forum_post_message = field_get_items('forum_post', $quoted_forum_post, 'forum_forum_post_message');

      // Wrap the text in quote-tags and populate the message field.
      // @todo Check if LANGUAGE_NONE is the correct way to go here.
      $form['forum_forum_post_message'][LANGUAGE_NONE][0]['#default_value'] = '[quote]' . $quoted_forum_post_message[0]['value'] . '[/quote]';
    }
  }

  // Set default text format for message field to bbcode.
  if (filter_format_exists('bbcode') && user_access('use text format bbcode')) {
    // @todo Check if LANGUAGE_NONE is the correct way to go here.
    $form['forum_forum_post_message'][LANGUAGE_NONE][0]['#format'] = 'bbcode';
  }
  else {
    // @todo Check if LANGUAGE_NONE is the correct way to go here.
    $form['forum_forum_post_message'][LANGUAGE_NONE][0]['#format'] = 'plain_text';
  }

  if (isset($form_state['forum_post'])) {
    $forum_post = $form_state['forum_post'];

    // Hide forum_category field if user lacks sufficient permissions.
    if ($forum_post->is_first && $forum_post->tid) {
      if (!user_access('administer forum threads') && !user_access('move forum threads')) {
        if (isset($form['forum_category'])) {
          // @todo Check if LANGUAGE_NONE is the correct way to go here.
          $form['forum_category'][LANGUAGE_NONE]['#type'] = 'hidden';
        }
      }
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function brain_forum_entity_presave($entity, $type) {
  if ($type == 'forum_post') {
    // Save the thread title and status.
    if ($entity->is_first) {
      $thread = thread_load($entity->tid);
      $thread->title = $entity->title;
      $thread->status = $entity->status;
      $thread->save();
    }
  }
}


/**
 * Implements hook_{ENTITY_ID}_update().
 *
 * Responds to a forum_post being updated.
 *
 * This hook is invoked after the forum_post has been updated in the database.
 *
 * @param $forum_post
 *   The forum_post obejct that is being updated.
 *
 * @see hook_entity_update()
 * @see http://backdrop.org/node/999938
 * @see brain_forum_thread_get_last_published_pid()
 * @see brain_forum_thread_update_last_forum_post_info()
 */
function brain_forum_thread_update($thread) {
  // Update the brain_forum_forum_post.thread_status for each forum_post in the thread.
  if ($thread->status != $thread->original->status) {
    $forum_posts = db_select('brain_forum_forum_post', 'p')
      ->fields('p', array('pid'))
      ->condition('tid', $thread->tid, '=')
      ->execute();

    foreach ($forum_posts as $entity) {
      $forum_post = forum_post_load($entity->pid);
      $forum_post->thread_status = $thread->status;
      $forum_post->save();
    }
  }
}


/**
 * Implements hook_{ENTITY_ID}_update().
 *
 * Responds to a forum_post being updated.
 *
 * This hook is invoked after the forum_post has been updated in the database.
 *
 * @param $forum_post
 *   The forum_post obejct that is being updated.
 *
 * @see hook_entity_update()
 * @see http://backdrop.org/node/999938
 * @see brain_forum_thread_get_last_published_pid()
 * @see brain_forum_thread_update_last_forum_post_info()
 */
function brain_forum_forum_post_update($forum_post) {
  // Update the thread.forum_posts count if the status of the forum_post was changed.
  // Also update info about last forum_post in thread if necessary.
  if ($forum_post->status != $forum_post->original->status && !$forum_post->is_first) {
    $thread = thread_load($forum_post->tid);
    if ($forum_post->status) {
      // Increment thread.forum_posts count.
      $thread->forum_posts++;
      // Update info about last forum_post in thread.
      if (($thread->last_pid != $forum_post->pid) && ($forum_post->pid == brain_forum_thread_get_last_published_pid($forum_post->tid))) {
        brain_forum_thread_update_last_forum_post_info($thread, $forum_post);
      }
    }
    elseif ($thread->forum_posts > 0) {
      // Decrement thread.forum_posts count.
      $thread->forum_posts--;
      // Update info about last forum_post in thread.
      if ($thread->last_pid == $forum_post->pid) {
        $last_pid = brain_forum_thread_get_last_published_pid($forum_post->tid);
        $last_forum_post = forum_post_load($last_pid);
        if (!$last_forum_post->is_first) {
          brain_forum_thread_update_last_forum_post_info($thread, $last_forum_post);
        }
        else {
          brain_forum_thread_reset_last_forum_post_info($thread);
        }
      }
    }
    $thread->save();
  }
}


/**
 * Implements hook_{ENTITY_ID}_insert().
 *
 * Responds when a forum_post is inserted.
 *
 * This hook is invoked after the forum_post is inserted into the database.
 *
 * @param $forum_post
 *   The forum_post object that is being inserted.
 *
 * @see hook_entity_insert()
 * @see http://backdrop.org/node/999938
 */
function brain_forum_forum_post_insert($forum_post) {
  if ($forum_post->status && !$forum_post->is_first) {
    // Load the thread associated with the inserted forum_post.
    $thread = thread_load($forum_post->tid);

    // Save information about last forum_post in this thread.
    brain_forum_thread_update_last_forum_post_info($thread, $forum_post);

    // Increment number of forum_posts by 1.
    $thread->forum_posts++;

    $thread->save();
  }
}


/**
 * Implements hook_{ENTITY_ID}_delete().
 *
 * Responds to forum_post deletion.
 *
 * This hook is invoked after the forum_post has been removed from the database.
 *
 * @param $forum_post
 *   The forum_post object that is being deleted.
 *
 * @see hook_entity_delete()
 * @see http://backdrop.org/node/999938
 */
function brain_forum_forum_post_delete($forum_post) {
  if ($forum_post->is_first) {
    // Delete thread.
    entity_delete('thread', $forum_post->tid);
  }
  else {
    // Load the thread associated with the deleted forum_post.
    $thread = thread_load($forum_post->tid);
    if ($thread->forum_posts > 0 && $forum_post->status) {
      // Decrement number of forum_posts by 1.
      $thread->forum_posts--;
    }
    // Update information of last forum_post in thread.
    if ($thread->last_pid == $forum_post->pid) {
      $pid = brain_forum_thread_get_last_published_pid($forum_post->tid);
      $last_forum_post = forum_post_load($pid);
      brain_forum_thread_update_last_forum_post_info($thread, $last_forum_post);
    }

    $thread->save();
  }
}


/**
 * Form API submit callback for the delete button.
 *
 * @see brain_forum_forum_post_add_form()
 */
function brain_forum_forum_post_add_form_submit_delete(&$form, &$form_state) {
  // Unset ?destination in case it is given, otherwise below redirect will not
  // work since backdrop_goto() favors any given ?destination.
  unset($_GET['destination']);
  $form_state['redirect'] = 'forum/forum_post/' . $form_state['forum_post']->pid . '/delete';
}


/**
 * Form constructor for the confirmation form for deleting a forum_post.
 *
 * @param $forum_post
 *   The forum_post object to delete.
 *
 * @see brain_forum_forum_post_delete_page()
 * @see confirm_form()
 */
function brain_forum_forum_post_delete_form($form, &$form_state, $forum_post) {
  $form_state['forum_post'] = $forum_post;
  $form['#submit'][] = 'brain_forum_forum_post_delete_form_submit';
  if ($forum_post->is_first) {
    $question = t('Are you sure you want to delete entire thread %title?', array('%title' => $forum_post->title));
  }
  else {
    $question = t('Are you sure you want to delete this forum_post?');
  }

  $form = confirm_form($form, filter_xss($question), '<front>', t('This action cannot be undone.'), t('Delete'), t('Cancel'));

  return $form;
}


/**
 * Submission handler for brain_forum_forum_post_delete_form().
 *
 * @see entity_delete_multiple()
 * @see brain_forum_thread_get_pids()
 */
function brain_forum_forum_post_delete_form_submit($form, &$form_state) {
  $forum_post = $form_state['forum_post'];
  $pids = array($forum_post->pid);

  if ($forum_post->is_first) {
    $message = t('Thread %title has been deleted.', array('%title' => $forum_post->title));
    $log_message = 'Deleted thread %title';

    // Get forum_post pid of all forum_posts that have the same thread tid as this forum_post.
    $pids = brain_forum_thread_get_pids($forum_post->tid);
  }
  else {
    $message = t('The forum_post has been deleted.');
    $log_message = 'Deleted forum_post %pid';
  }

  entity_delete_multiple('forum_post', $pids);

  backdrop_set_message($message);
  watchdog('Brain Forum', $log_message, array('%title' => $forum_post->title, '%pid' => $forum_post->pid));

  $form_state['redirect'] = '<front>';
}


/**
 * Returns an array of all forum_post pids that belong to the specified thread.
 *
 * @param $tid
 *   Thread tid to get the forum_post pids from.
 *
 * @return
 *   An array of forum_post pids.
 *
 * @todo Fetch table name from entity info instead of hardcoding it.
 */
function brain_forum_thread_get_pids($tid) {
  $query = db_select('brain_forum_forum_post', 'p');
  $query->fields('p', array('pid'))
    ->condition('tid', $tid, '=');

  $result = $query->execute();
  while ($record = $result->fetchAssoc()) {
    $pids[] = $record['pid'];
  }

  return $pids;
}


/**
 * Returns forum_post.pid of the last published forum_post in the specified thread.
 *
 * @param $tid
 *   Thread tid to get the forum_post pid from.
 *
 * @return
 *   Post pid.
 *
 * @todo Fetch table name from entity info instead of hardcoding it.
 */
function brain_forum_thread_get_last_published_pid($tid) {
  $query = db_select('brain_forum_forum_post', 'p');
  $query->fields('p', array('pid'))
    ->condition('tid', $tid, '=')
    ->condition('status', 1, '=')
    ->orderBy('pid', 'DESC')
    ->range(0, 1);

  $result = $query->execute();
  while ($record = $result->fetchAssoc()) {
    return $record['pid'];
  }
}


/**
 * Updates information about the last publisehd forum_post in a thread.
 *
 * @param &$thread
 *   Thread object to update.
 * @param $forum_post
 *   Post object to fetch info from. This would be the last published forum_post in a
 *   thread.
 */
function brain_forum_thread_update_last_forum_post_info(&$thread, $forum_post) {
  if (is_object($thread) && is_object($forum_post)) {
    $thread->last_pid = $forum_post->pid;
    $thread->last_uid = $forum_post->uid;
    $thread->last_name = $forum_post->name;
    $thread->last_time = $forum_post->created;
  }
}


/**
 * Resets information about the last publisehd forum_post in a thread.
 *
 * @param &$thread
 *   Thread object to update.
 */
function brain_forum_thread_reset_last_forum_post_info(&$thread) {
  if (is_object($thread)) {
    $thread->last_pid = 0;
    $thread->last_uid = 0;
    $thread->last_name = '';
    $thread->last_time = 0;
  }
}

/**
 * Implements hook_autoload_info().
 */
function brain_forum_autoload_info() {
  return array(
    'BrainForumPost' => 'brain_forum.entity.inc',
    'BrainForumThread' => 'brain_forum.entity.inc',
    'brain_forum_forum_post_handler_edit_field' => 'views/brain_forum_forum_post_handler_field_edit.inc',
    'brain_forum_forum_post_handler_quote_field' => 'views/brain_forum_forum_post_handler_field_quote.inc',
    'brain_forum_forum_post_handler_reply_field' => 'views/brain_forum_forum_post_handler_field_reply.inc',
    'brain_forum_forum_post_handler_filter_status' => 'views/brain_forum_forum_post_handler_filter_status.inc',
    'brain_forum_forum_post_handler_filter_thread_status' => 'views/brain_forum_forum_post_handler_filter_thread_status.inc',
    'brain_forum_thread_handler_filter_status' => 'views/brain_forum_thread_handler_filter_status.inc',
  );
}

/**
 * Implements hook_config_info().
 */
function brain_forum_config_info() {
  $prefixes['brain_forum.settings'] = array(
    'label' => t('Brain forum settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}
